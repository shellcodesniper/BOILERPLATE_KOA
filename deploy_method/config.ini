[기본]
현재실행중인컨테이너이름 = server
확인주기 = 5
burnup대기시간 = 5
도커허브로그인정보제공 = yes
도커모드 = yes
nginx사용 = yes
업데이트확인_주기 = 10
logging = false
server_id = 서버이름
use_cron = yes
cron_text = */2 * * * *

[LOGGING]
bucket = 
access_key = 
secret_key = 
root_path = 
region_name = 
healthchecker_logname = healthchecker
time_rotation = 300
max_file_size_mb = 5

[도커설정]
접속정보 = unix://var/run/docker.sock

[도커허브]
아이디 = 
비밀번호 = 

[컨테이너]
server_master = server_master
server_slave = server_slave
server_rollback = server_rollback

[컨테이너_NGINX]
server_targetport = TARGET_PORT
server_targetcontainer = TARGET_CONTAINER
server_listenport = LISTEN_PORT

[컨테이너_기본설정]
server_targetport = 3000
server_targetcontainer = server_master
server_listenport = 80

[작성방법 명시(작성금지)]
server_id = USE_IP 로 설정시에는 외부 ip를 서버 구분ID로 사용하게됩니다.
업데이트확인_주기 = 기본 - 업데이트확인_주기 : 확인주기 * 업데이트확인_주기 마다 업데이트를 확인합니다.
현재실행중인컨테이너이름 = 기본 - 현재실행중인컨테이너이름 : 현재 실행중인 도커 컨테이너의 이름
nginx사용 = 기본 - NGINX사용 : 현재 비활성화 불가.
도커모드란1 = 도커에서 접속시에 var/run/docker.sock 등을 마운트 하여 사용할경우 도커설정-접속정보와 같이 설정
도커모드란2 = yes : 도커설정-접속정보 사용, no: 시스템에 환경 docker 접속정보 사용
컨테이너 작성방법1 = 기본컨테이너는 '서비스이름_master':'컨테이너이름'의 형태
컨테이너 작성방법2 = SLAVE 컨테이너는 '서비스이름_slave':'컨테이너이름'의 형태
컨테이너 작성방법3 = ROLLBACK 컨테이너는 '서비스이름_rollback':'컨테이너이름'의 형태
컨테이너 작성방법4 = 컨테이너 항목은 master,slave,rollback 이렇게 세가지 항목이 들어간다면 몇가지 서비스든 작성 가능합니다.
컨테이너 작성방법5 = 컨테이너 항목은 {서비스 이름}_{목적}:{컨테이너이름} 으로 계속 작성 가능합니다.
컨테이너_nginx 작성방법1 = 서비스별로 서비스이름_TARGETPORT, 서비스이름_TARGETCONTAINER, 서비스이름_LISTENPORT 에 해당 서비스가 적용되는 template에 지정한 환경변수 이름을 적어주셔야 합니다.
컨테이너_nginx 작성방법2 = template 파일들에 들어간 정보가 변환되어 적용됩니다.
컨테이너_기본설정 작성방법1 = 서비스별로 기본값들을 작성해주시면 됩니다.
이미지 업데이트 절차 = 컨테이너 항목에 정의된 컨테이너 이름들이 실행중인 이미지를 최신으로 가져옵니다.
logging 설정1 = LOGGING은 S3에 업로드됩니다.
logging 설정2 = LOGGING - ROOT_PATH 는 로그가 저장될 버킷내부 기준 폴더입니다.
logging 설정3 = LOGGING TIME_ROTATION 은 초단위로 작성해주시면 됩니다.
logging 설정4 = LOGGING MAX_FILE_SIZE_MB 는 로그파일당 최대크기이며 메가바이트단위로 작성해주시면됩니다.